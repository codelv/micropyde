"""
Copyright (c) 2017, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on Dec 13, 2017

@author: jrm
"""
from enaml.core.include import Include
from enaml.layout.api import AreaLayout, TabLayout, DockBarLayout, HSplitLayout
from micropyde.core.api import DockArea, DockItem
from enaml.widgets.dock_events import DockItemEvent
from enaml.stdlib.dock_area_styles import (
    register_styles, available_styles, CommonStyles, AreaStyle, ItemStyle,
    TitleBarStyle, DockBarButtonStyle, ContainerStyle,
    TabBarTabStyle, TitleBarLabelStyle, TitleBarButtonStyle, Style, Setter
)

def get_system_color(name='window'):
    from enaml.qt.QtWidgets import QWidget
    palette = QWidget().palette()
    qcolor = getattr(palette, name)().color()
    return qcolor.name(qcolor.HexArgb)


template SystemStyle():
    """ DockArea style sheet styles that uses the system colors

    """
    CommonStyles():
        pass
    AreaStyle:
        background = get_system_color('window')
    ItemStyle:
        background = get_system_color('window')
        border = '1px solid '+get_system_color('base')
    TitleBarStyle:
        background = get_system_color('base')

    # Add alert styles for an "important" alert.
    TitleBarStyle:
        pseudo_class = 'alert(important)'
        background = 'orange'

    TitleBarLabelStyle:
        pseudo_class = 'alert(important)'
        color = 'black'

    DockBarButtonStyle:
        pseudo_class = 'alert(important)'
        background = 'orange'

    TabBarTabStyle:
        background = get_system_color('window')

    TabBarTabStyle:
        pseudo_class = 'selected'
        background = get_system_color('dark')

    TabBarTabStyle:
        pseudo_class = 'alert(important)'
        background = 'orange'

    # Add alert styles for a "meltdown" alert.
    TitleBarStyle:
        pseudo_class = 'alert(meltdown)'
        background = 'red'

    TitleBarButtonStyle:
        pseudo_class = 'hover'
        background = get_system_color('dark')

    Style:
        element = 'DockArea'
        pseudo_element = 'tab-bar-corner-button'
        pseudo_class = 'hover'
        Setter:
            field = 'background'
            value = get_system_color('dark')

    DockBarButtonStyle:
        border = '1px solid ' + get_system_color('window')

    DockBarButtonStyle:
        pseudo_class = 'checked'
        background = get_system_color('dark')

    DockBarButtonStyle:
        pseudo_class = 'alert(meltdown)'
        background = 'red'

    TabBarTabStyle:
        pseudo_class = 'alert(meltdown)'
        background = 'red'

    ContainerStyle:
        pseudo_class = 'alert(meltdown)'
        background = 'yellow'

    ItemStyle:
        pseudo_class = 'alert(meltdown)'
        background = 'red'


if 'system' not in available_styles():
    register_styles('system', SystemStyle)

enamldef DockView(DockArea):
    attr workbench
    attr plugin
    name = 'dock_area'
    style = 'system'
    layout << plugin.dock_layout
#    dock_events_enabled = True
#    dock_event::
#        event = change['value']
#        if event.type==DockItemEvent.TabSelected:
#            if event.name.startswith('viewer'):
#                self.find(event.name).resize()
                    #print event.name,event.type
    dock_events_enabled = True
    dock_event ::
        event = change['value']
        plugin = workbench.get_plugin('micropyde.editor')
        #: Update the active document
        if event.type == DockItemEvent.Type.Shown \
                and 'editor-item-' in event.name:
            path = event.name.split("editor-item-")[-1]
            matches = [d for d in plugin.documents if d.name==path]
            if matches:
                plugin.active_document = matches[0]
        else:
            plugin.save_dock_area(change)
    Include:
        objects << plugin.dock_items
