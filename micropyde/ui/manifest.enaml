"""
Copyright (c) 2017, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on Dec 6, 2015

@author: jrm
"""
import os
import sys
import enaml
from micropyde.core.utils import menu_icon
from enaml.workbench.api import Extension, PluginManifest, ExtensionPoint
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import (
    ActionItem, Branding, MenuItem, ItemGroup, Autostart
)
from .extensions import DOCK_ITEM_POINT, SETTINGS_PAGE_POINT, SettingsPage

def plugin_factory():
    from micropyde.ui.plugin import MicropydePlugin
    return MicropydePlugin()


def undo(event):
    plugin = event.workbench.get_plugin('micropyde.ui')
    plugin.undo()


def redo(event):
    plugin = event.workbench.get_plugin('micropyde.ui')
    plugin.redo()


def open_preferences(event):
    with enaml.imports():
        from micropyde.ui.dialogs import PreferencesDialog
    plugin = event.workbench.get_plugin('micropyde.ui')
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    PreferencesDialog(ui.window,
                      plugin=event.workbench.get_plugin(
                          'micropyde.workbench.core')).exec_()


def about_micropyde(event):
    with enaml.imports():
        from micropyde.ui.about_dialog import AboutDialog
    plugin = event.workbench.get_plugin('micropyde.ui')
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    AboutDialog(ui.window,
                plugin=event.workbench.get_plugin(
                    'micropyde.workbench.core')).exec_()


def open_url(page):
    if sys.platform == 'win32':
        os.startfile(page)
    else:
        import subprocess
        cmd = "open" if sys.platform == "darwin" else "xdg-open"
        subprocess.call([cmd, page])


def open_settings(event):
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    plugin = event.workbench.get_plugin('micropyde.ui')
    with enaml.imports():
        from .settings import SettingsDialog

    SettingsDialog(ui.window, plugin=plugin, event=event).exec_()


def settings_page_factory():
    with enaml.imports():
        from .settings import SystemSettingsPage
    return SystemSettingsPage


enamldef UIManifest(PluginManifest):
    """ The plugin manifest for the primary example plugin.

    This plugin acts as the entry point for all other plugins in this
    example. It contributes the window branding, default actions, and
    the workspace definitions.

    """
    id = 'micropyde.ui'
    factory = plugin_factory

    Extension:
        id = 'branding'
        point = 'enaml.workbench.ui.branding'
        Branding:
            title = ''

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'micropyde.ui.open_preferences'
            handler = open_preferences
        Command:
            id = 'micropyde.ui.open_settings'
            handler = open_settings
        Command:
            id = 'micropyde.ui.open_url'
            handler = lambda e:open_url(e.parameters.get('url'))

    Extension:
        id = 'autostart'
        point = 'enaml.workbench.ui.autostart'
        rank = -99
        Autostart:
            plugin_id = 'micropyde.ui'


    ExtensionPoint:
       id = DOCK_ITEM_POINT
       description = "Add items to the dock"

    ExtensionPoint:
        id = SETTINGS_PAGE_POINT
        description = "Add pages to the settings dialog"

    Extension:
        id = 'settings'
        point = SETTINGS_PAGE_POINT
        SettingsPage:
            name = "System"
            plugin_id = 'micropyde.ui'
            factory = settings_page_factory

    Extension:
        id = 'actions'
        point = 'enaml.workbench.ui.actions'
#        ActionItem:
#            path = '/settings/prefs'
#            label = 'Preferences'
#            command = 'micropyde.ui.open_preferences'
        ActionItem:
            path = '/settings/editor'
            label = 'Editor...'
            shortcut = 'Ctrl+Alt+S'
            command = 'micropyde.ui.open_settings'
        ActionItem:
            path = '/help/issues'
            label = 'Report issue...'
            command = 'micropyde.ui.open_url'
            parameters = {'url': 'https://github.com/codelv/micropyde/issues'}

        ActionItem:
            path = '/help/about'
            label = 'About...'
            command = 'micropyde.ui.open_url'
            parameters = {'url': 'https://www.codelv.com/projects/micropyde/'}

        ActionItem:
            path = '/help/donate'
            label = 'Donate...'
            command = 'micropyde.ui.open_url'
            parameters = {'url': 'https://www.codelv.com/projects/micropyde/support/'}
        ActionItem:
            path = '/help/logs'
            label = 'Open logs...'
            command = 'micropyde.ui.open_url'
            parameters = {'url': os.path.expanduser('~/.config/micropyde/logs')}

#         ActionItem:
#             path = '/edit/undo'
#             label = 'Undo'
#             shortcut = 'Ctrl+Z'
#             icon = menu_icon('arrow_undo')
#             command = 'micropyde.ui.undo'
#         ActionItem:
#             path = '/edit/redo'
#             label = 'Redo'
#             shortcut = 'Ctrl+Y'
#             icon = menu_icon('arrow_redo')
#             command = 'micropyde.ui.redo'