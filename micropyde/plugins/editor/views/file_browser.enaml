#------------------------------------------------------------------------------
# Copyright (c) 2017 Jairus Martin
#
# Distributed under the terms of the GPL v3 License.
#
# The full license is in the file LICENSE, distributed with this software.
#------------------------------------------------------------------------------
from enaml.core.api import Conditional, Looper
from enaml.core.dynamic_template import DynamicTemplate
from enaml.widgets.api import Container, PushButton, ProgressBar, Label, Field
from enamlx.widgets.api import TreeView, TreeViewItem, TreeViewColumn
from micropyde.core import load_icon


template TreeItemLoop(items):
    """ A templated loop which maps a template over a sequence."""
    TreeItemLoop(tuple(items[:-1])):
        pass
    AutoTreeItem:
        item = items[-1]


template TreeItemLoop(items: ()):
    """ The terminating condition for the templated loop."""
    pass


def human_bytes(size):
    """ Human readable bytes"""
    if size < 1000:
        return '{} B'.format(size)
    elif size < 1000000:
        return '{} KB'.format(round(size/1000.0, 2))
    elif size < 1000000000:
        return '{} MB'.format(round(size/1000000.0, 2))
    return '{} GB'.format(round(size/1000000000.0, 2))

template AutoTreeItemNode(files):
    """ Template for tree item nodes. This defines
        the columns and how the tree will be walked.
    """
    TreeViewColumn:
        text << human_bytes(info[6])
    TreeViewColumn:
        text << '{}'.format(info[0])
    TreeItemLoop(files):
        pass


enamldef AutoTreeItem(TreeViewItem):
    """ File browser Tree node"""
    attr item
    attr spec = item[1]
    attr info = spec.get('info', ['' for i in range(10)])
    text << '{}'.format(item[0])
    items << list(sorted(spec.get('files', {}).items(),
                     key=lambda p: p[0]))
    DynamicTemplate:
        base = AutoTreeItemNode
        args = (tuple(items),)


enamldef FileBrowserView(Container):
    attr plugin
    attr files << sorted(plugin.files.items(),
                         key=lambda i:i[0])
    Field:
        placeholder = "Search..."
    TreeView: tree:
        horizontal_headers << ['Name', 'Size', 'Modified']
        horizontal_stretch = True
        items << files
        Looper:
            iterable << tree.items
            AutoTreeItem:
                item = loop_item
            # TreeViewItem:
            #     attr parent_index << loop_index
            #     attr mod << module_browser.items[parent_index]

                # Looper:
                #     iterable << parent.items
                #     TreeViewItem:
                #         attr parent_index << loop_index
                #         attr spec = loop_item[1]
                #         TreeViewColumn:
                #             text << '{}'.format(spec.get('name', ''))
                #         TreeViewColumn:
                #             text << '{}'.format(spec.get('size', ''))
                #         TreeViewColumn:
                #             text << '{}'.format(spec.get('modified', ''))
    Conditional: indexing:
        condition << (plugin.scanning_progress> 0
                      and plugin.scanning_progress < 100)
        ProgressBar:
            value << plugin.scanning_progress
        Label:
            text << plugin.scanning_status
    PushButton:
        icon = load_icon("arrow_refresh")
        text = "refresh"
        clicked ::
            core = plugin.workbench.get_plugin('enaml.workbench.core')
            core.invoke_command('micropyde.board.scan_files')