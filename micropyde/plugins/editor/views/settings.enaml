#------------------------------------------------------------------------------
# Copyright (c) 2017 Jairus Martin
#
# Distributed under the terms of the GPL v3 License.
#
# The full license is in the file LICENSE, distributed with this software.
#------------------------------------------------------------------------------
import re
import sys
if sys.platform == 'win32':
    from enaml import winutil
from enaml.core.api import Looper
from enaml.layout.api import align, hbox, spacer
from enaml.core.api import Conditional
from enaml.stdlib.mapped_view import MappedView
from enaml.stdlib.dialog_buttons import DialogButtonBox, DialogButton
from enaml.stdlib.task_dialog import (
    TaskDialogBody, TaskDialogCommandArea,
    TaskDialogContentArea, TaskDialogDetailsArea, TaskDialogFootnoteArea,
    TaskDialogIconArea, TaskDialogInstructionArea, TaskDialogStyleSheet
)
from enaml.widgets.api import (
    Dialog, Field, Label, PushButton, Form, ObjectCombo, SplitItem, Splitter,
    Container, SpinBox, FileDialogEx,

)
from enamlx.widgets.api import TreeView, TreeViewItem
from .themes import THEMES

enamldef SettingsPage(Container):
    attr model


enamldef EditorSettingsPage(SettingsPage):
    Label:
        text = "Editor"
    Form:
        Label:
            text = "Zoom"
        SpinBox:
            value := plugin.zoom
            minimum = -10
            maximum = 20
        Label:
            text = "Theme"
        ObjectCombo:
            items = list(THEMES.keys())
            selected := plugin.theme
    Label:
        text = "Project"
    Form:
        Label:
            text = "Path"
        Label:
            text = ""
        Field:
            text := plugin.project_path
        PushButton:
            text = "Browse"
            clicked :: FileDialogEx.get_existing_directory(
                self,
                current_path=plugin.project_path)

    Label:
        text = "Micropython SDK"
    Form:
        Label:
            text = "Board"
        ObjectCombo:
            items = list(plugin.get_member('upy_board').items)
            selected := plugin.upy_board
        Label:
            text = "Micropython"
        Label:
            text = ""
        Field:
            text := plugin.upy_path
        PushButton:
            text = "Browse"
            clicked :: FileDialogEx.get_existing_directory(
                            self,
                            current_path=plugin.upy_path)
        Label:
            text = "Micropython Modules"
        Label:
            text = ""
        Field:
            text := plugin.upy_lib_path
        PushButton:
            text = "Browse"
            clicked :: FileDialogEx.get_existing_directory(
                            self,
                            current_path=plugin.upy_lib_path)


enamldef SettingsDialog(Dialog): dialog:
    title = 'Settings'
    initial_size = (720, 480)
    attr plugin
    attr event
    TaskDialogStyleSheet:
            pass
    TaskDialogBody:
        TaskDialogInstructionArea:
            Label:
                style_class = 'task-dialog-instructions'
                text = 'Configure editor'
        # TaskDialogContentArea:
        #     Label:
        #         style_class = 'task-dialog-content'
        #         text = 'Editor settings'
        TaskDialogDetailsArea: details:
            visible = True
            Splitter:
                SplitItem:
                    Container:
                        padding = 0
                        Field:
                            placeholder = "Search..."
                        TreeView: tree:
                            horizontal_headers = ['Setting']
                            horizontal_stretch = True
                            show_horizontal_header = False
                            items << plugin.settings_items
                            Looper:
                                iterable << tree.items
                                TreeViewItem:
                                    text = loop_item.settings_title
                                    clicked :: settings.model = loop_item
                SplitItem:
                    stretch = 4
                    MappedView: settings:
                        model = plugin
                        typemap << plugin.settings_pages

        TaskDialogCommandArea:
            constraints = [
                hbox(spacer, btn_ok, btn_no, btn_apply),
                align('v_center', btn_ok, btn_no, btn_apply),
            ]
            PushButton: btn_ok:
                text = "Ok"
                clicked :: dialog.close()
            PushButton: btn_no:
                text = "Cancel"
                clicked :: dialog.close()
            PushButton: btn_apply:
                text = "Apply"
                clicked :: dialog.close()


