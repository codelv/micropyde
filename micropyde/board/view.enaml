"""
Copyright (c) 2017, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

@author: jrm
"""
from serial.tools.list_ports import comports
from twisted.internet.protocol import Protocol
from enaml.layout.api import hbox, vbox, align
from enaml.widgets.api import (
    Container, ObjectCombo, PushButton, Html, Field, Timer, RawWidget,
    Splitter, SplitItem,
)
from enaml.qt.QtWidgets import QPlainTextEdit
from enaml.scintilla.api import Scintilla
from enaml.scintilla.themes import THEMES
from enamlx.widgets.api import KeyEvent
from micropyde.core.utils import load_icon
from micropyde.core.api import DockItem
from .dialogs import PasswordDialog


class TerminalProtocol(Protocol):
    def __init__(self, view):
        self.view = view
        self.listeners = []
        super(TerminalProtocol, self).__init__()

    def connectionMade(self):
        self.view.opened = True
        #self.transport._serial.flush()
        #self.transport.write(b'\x02') # Make sure were not in raw mode

    def connectionLost(self, reason):
        self.view.opened = False

    def dataReceived(self, data):
        console = self.view.console
        widget = console.proxy.widget
        #: Append text

        try:
            data = data.decode('utf-8','replace')
            widget.insertPlainText(data)

            #: Notify any listeners
            for listener in self.listeners:
                listener(data)

            if "Password:" in data:
                self.view.plugin.show_password_prompt()

        except Exception as e:
            print("Failed to read output: {}".format(e))


class PlainTextEdit(RawWidget):
    """ QTextEdit used by the MultiLineField is horribly slow at appending
    text. This widget is significantly faster.

    """
    def create_widget(self, parent):
        widget = QPlainTextEdit(parent)
        widget.setReadOnly(True)
        widget.setMaximumBlockCount(1000)
        return widget


enamldef MonitorDockItem(DockItem): view:
    attr ports = comports()
    attr protocol: TerminalProtocol
    alias console
    attr device << plugin.board
    attr opened = False
    name = 'monitor-item'
    title = "Monitor"
    icon = load_icon("application_osx")
    closable = False
    stretch = 1
    attr editor_plugin << plugin.workbench.get_plugin("micropyde.editor")

    func on_connect(result):
        if result:
            device.write(b"help()\r\n")

    func toggle_port():
        was_open = opened
        device.disconnect()
        if not was_open:
            view.protocol = TerminalProtocol(view)
            device.connect(view.protocol).addCallback(on_connect)

    func write_text(text):
        lines = text.split("\n")
        if not text.endswith("\r\n"):
            text += "\r\n"
        #if not text.startswith("\r\n"):
        #    text = "\r\n" + text
        if len(lines)>2:
            #: Enter paste mode
            device.write(b'\x05')
            #: Send text
            device.write(text.encode())
            device.write(b'\x04')
        else:
            #: Send text as is
            device.write(text.encode())

        editor.set_text("")

    Container:
        constraints = [
            vbox(
                hbox(ports_cmb,btn_open, btn_refresh, btn_clear),
                splitter,
            ),
            align('v_center', ports_cmb,btn_open, btn_refresh, btn_clear),
            #editor.height >= 30,
            #editor.height <= 50,
        ]
        ObjectCombo: ports_cmb:
            items << device.available_connections
            to_string = lambda c:c.name
            selected << device.connection
            selected ::
                connection = change['value']
                if connection:
                    device.disconnect()
                    device.connection = change['value']

        PushButton: btn_open:
            #text << "Close" if opened else "Open"
            icon << load_icon("connect" if opened else "disconnect")
            tool_tip << "Connected. Click to disconnect" if opened else "Disconnected. Click to Connect"
            clicked :: toggle_port()
        PushButton: btn_clear:
            #text = "Clear"
            icon = load_icon("bin")
            tool_tip = "Clear console"
            clicked :: console.proxy.widget.clear()
        PushButton: btn_refresh:
            icon = load_icon("arrow_refresh")
            tool_tip = "Refresh ports"
            clicked :: device.refresh_connections()
        Splitter: splitter:
            orientation = 'vertical'
            SplitItem:
                Container:
                    padding = 0
                    resist_height = 'weak'
                    PlainTextEdit: console:
                        hug_width = 'ignore'
                        hug_height = 'ignore'

            SplitItem:
                Container:
                    padding = 0
                    resist_height = 'weak'
                    constraints = [
                        hbox(editor, bbox),
                        align('v_center', editor, bbox),
                        # editor.height >= 30,
                        #editor.height <= 100,
                    ]
                    Scintilla: editor:
                        syntax = "python"

                        theme << THEMES[editor_plugin.theme] if editor_plugin else 'friendly'
                        #enabled << opened
                        settings = {
                            "tab_width": 4,
                            "use_tabs": False,
                            "indent": 4,
                            "tab_indents": True,
                            "backspace_unindents": True,
                            "autocompletion_threshold": 3,
                        }
                        autocomplete = 'all'
                        text_changed :: timer.start()
                        Timer: timer:
                            interval = 50
                            single_shot = True
                            timeout ::
                                text = editor.get_text()
                                editor.autocompletions = editor_plugin.autocomplete(
                                    text, editor.cursor_position)
                                #: Force trigger
                                if text.endswith("."):
                                    editor.proxy.widget.autoCompleteFromAll()
                        KeyEvent:
                            keys = ['shift+return']
                            released ::
                                text = editor.get_text()
                                write_text(text)
                                editor.set_text("")

                    Container: bbox:
                        PushButton: btn_send:
                            text << "Send"
                            tool_tip = "Paste contents into interpreter"
                            enabled << opened
                            clicked ::
                                text = editor.get_text()
                                write_text(text)
                                editor.set_text("")
                        PushButton: btn_abort:
                            text << "Abort"
                            enabled << opened
                            tool_tip = "Send Ctrl+C"
                            clicked :: device.write(b'\x03')
                        PushButton: btn_raw:
                            text << "Raw"
                            enabled << opened
                            tool_tip = "Send Ctrl+B"
                            clicked :: device.write(b'\x02')
                        PushButton: btn_rst:
                            text << "Reset"
                            enabled << opened
                            tool_tip = "Send Ctrl+D"
                            clicked :: device.write(b'\x04')
