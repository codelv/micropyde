"""
Copyright (c) 2017, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

@author: jrm
"""
from enaml.core.api import Looper
from enaml.layout.api import align, hbox, spacer
from enaml.core.api import Conditional
from enaml.stdlib.mapped_view import MappedView
from enaml.widgets.api import (
    Dialog, Field, Label, PushButton, Form, ObjectCombo, SplitItem, Splitter,
    Container, SpinBox, FileDialogEx,

)
from micropyde.core.utils import load_icon
from .plugin import SerialConnection, WebsocketConnection


enamldef WebsocketConnectionForm(Container):
    attr model
    padding = 0
    #activated ::
    #    model.scan_subnet()
    Label:
        text = "Websocket"
    Form:
        Label:
            text = "Devices"
        ObjectCombo:
            items << model.addresses
            selected := model.address
        Label:
            text = "Address"
        Field:
            text := model.address
        Label:
            text = "Port"
        SpinBox:
            value := model.port
            maximum = 65535
        PushButton:
            text = "Scan"
            tool_tip = "Scan the local subnet for devices serving on the given port number"
            icon = load_icon('arrow_refresh')
            clicked :: model.scan_subnet()


enamldef SerialConnectionForm(Container):
    attr model
    padding = 0
    Label:
        text = "Serial Port"
    Form:
        Label:
            text = "Port"
        Field:
            text := model.port
        Label:
            text = "Baudrate"
        SpinBox:
            value := model.baudrate
            maximum = 999999999
            single_step = 9600

enamldef BoardSettingsPage(Container):
    attr model
    attr board << model.board
    Label:
        text = "Connection type"
    Form:
        ObjectCombo:
            items << board.configured_connections
            to_string = lambda c:c.__class__.__name__
            selected := board.connection
    MappedView:
        model << board.connection
        typemap = {SerialConnection: SerialConnectionForm,
                   WebsocketConnection: WebsocketConnectionForm}

    Label:
        text = "Passwords"
    PushButton:
        text = "Clear passwords"
        clicked :: model.passwords = {}




