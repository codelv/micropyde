"""
Copyright (c) 2017, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

@author: jrm
"""
import re
import sys
if sys.platform == 'win32':
    from enaml import winutil
from enaml.layout.api import align, hbox, spacer
from enaml.core.api import Conditional
from enaml.stdlib.dialog_buttons import DialogButtonBox, DialogButton
from enaml.stdlib.task_dialog import (
    TaskDialogBody, TaskDialogCommandArea,
    TaskDialogContentArea, TaskDialogDetailsArea, TaskDialogFootnoteArea,
    TaskDialogIconArea, TaskDialogInstructionArea, TaskDialogStyleSheet
)
from enaml.widgets.api import (
    Dialog, Field, Label, PushButton, RadioButton, CheckBox, Html,
    ProgressBar, ObjectCombo, Form, Container, SpinBox, FileDialogEx
)
from serial.tools.list_ports import comports
from twisted.internet.protocol import ProcessProtocol
from twisted.internet.defer import Deferred


class FlashProcessProtocol(ProcessProtocol):
    def __init__(self, view):
        self.view = view

    def outReceived(self, data):
        lines = data.decode()
        source = []
        for line in lines.split("\n"):
            m = re.search(r'\((\d+)\s*%\)',line)
            if m:
                self.view.progress = int(m.group(1))
            source.append(line)
        self.view.source += "<br/>".join(source)

    def processExited(self, reason):
        self.view.source += "Exited: {}".format(reason.value.exitCode)
        self.view.complete = True
        self.view.status = "Success" if reason.value.exitCode == 0 else "Failed"


enamldef FlashDialog(Dialog): dialog:
    title = 'Flash firmware'
    attr command
    attr event
    attr path
    attr source = ""
    attr complete = False
    attr started = False
    attr progress = 0
    attr status = ""
    attr plugin
    initial_size = (640, 320)
    func run():
        proto = FlashProcessProtocol(dialog)
        dialog.started = True
        details.visible = False
        plugin.update_firmware(proto)
    TaskDialogStyleSheet:
            pass
    TaskDialogBody:
        TaskDialogInstructionArea:
            Label:
                style_class = 'task-dialog-instructions'
                text = 'Flash new firmware'
        TaskDialogContentArea:
            Label:
                style_class = 'task-dialog-content'
                text = 'This will replace existing firmware (if any).'
            Form:
                ObjectCombo: ports:
                    items = comports()
                    attr matches = [p for p in self.items if p.device == plugin.port]
                    selected << matches[0] if matches else None
                    selected ::
                        plugin.port = change['value'].device
                PushButton: btn:
                    text = "Refresh"
                    clicked :: ports.items = comports()
            Conditional:
                condition << dialog.started
                ProgressBar:
                    value << dialog.progress
                Html:
                    source << dialog.source
        TaskDialogDetailsArea: details:
            visible = False
            Form:
                Label:
                    text = "Baudrate (--baud)"
                SpinBox:
                    value := plugin.flash_baud
                    minimum = 0
                    maximum = 99999999
                Label:
                    text = 'Chip (--chip)'
                ObjectCombo:
                    items = list(EditorPlugin.flash_chip.items)
                    selected := plugin.flash_chip
                Label:
                    text = 'Mode (-fm)'
                ObjectCombo:
                    items = list(EditorPlugin.flash_mode.items)
                    selected := plugin.flash_mode
                Label:
                    text = "Frequency (-ff)"
                ObjectCombo:
                    items = list(EditorPlugin.flash_freq.items)
                    selected := plugin.flash_freq
                Label:
                    text = "SPI Connection"
                Field:
                    text := plugin.flash_spi_connection
                Label:
                    text = 'Verify'
                CheckBox:
                    checked := plugin.flash_verify
                Label:
                    text = 'Compress'
                CheckBox:
                    checked := plugin.flash_compress
                Label:
                    text = 'Address'
                SpinBox:
                    minimum = 0
                    maximum = 99999999999 #: Ummm 16 meg
                    value := plugin.flash_address
                Label:
                    text = 'Filename'
                Form:
                    Field:
                        text := plugin.flash_filename
                    PushButton:
                        text = "Browse"
                        clicked ::
                            path = FileDialogEx.get_open_file_name(self,
                                                                   current_path='../micropython/fw',
                                                                   name_filters=['*.bin','*.ota'])
                            if path:
                                plugin.flash_filename = path

        TaskDialogCommandArea:
            constraints = [
                hbox(cbox, spacer, lbl, btn_yes, btn_no),
                align('v_center', cbox, lbl, btn_yes, btn_no),
            ]
            CheckBox: cbox:
                text = 'Show flash options'
                checked := details.visible
            Label: lbl:
                text << status
            PushButton: btn_no:
                text << "Close" if dialog.complete else "Cancel"
                clicked :: dialog.close()
            PushButton: btn_yes:
                text = "Flash"
                clicked :: run()


class EraseProcessProtocol(ProcessProtocol):
    def __init__(self, view):
        self.view = view

    def outReceived(self, data):
        source = []
        for line in data.decode().split("\n"):
            source.append(line)
        self.view.source += "<br/>".join(source)

    def processExited(self, reason):
        v = self.view
        v.source += "Exited: {}".format(reason.value.exitCode)
        v.complete = True
        v.status = "Success" if reason.value.exitCode == 0 else "Failed"


enamldef EraseDialog(Dialog): dialog:
    title = 'Erase flash'
    attr command
    attr event
    attr source = ""
    attr complete = False
    attr plugin
    attr status = ""
    initial_size = (640, 320)
    func run():
        details.visible = True
        console.source = ""
        proto = EraseProcessProtocol(dialog)
        plugin.erase_flash(proto)

    TaskDialogStyleSheet:
            pass
    TaskDialogBody:
        TaskDialogInstructionArea:
            Label:
                style_class = 'task-dialog-instructions'
                text = 'Are you sure you want to erase?'
        TaskDialogContentArea:
            Label:
                style_class = 'task-dialog-content'
                text = 'This operation cannot be undone.'
            Form:
                ObjectCombo: ports:
                    items = comports()
                    selected ::
                        editor = event.workbench.get_plugin('micropyde.editor')
                        editor.port = change['value'].device
                PushButton: btn:
                    text = "Refresh"
                    clicked :: ports.items = comports()
        TaskDialogDetailsArea: details:
            visible = False
            Html: console:
                source << dialog.source
        TaskDialogCommandArea:
            constraints = [
                hbox(spacer, lbl, btn_yes, btn_no),
                align('v_center', lbl, btn_yes, btn_no)
            ]
            Label: lbl:
                text << status
            PushButton: btn_no:
                text << "Close" if dialog.complete else "Cancel"
                clicked :: dialog.close()
            PushButton: btn_yes:
                text = "Erase"
                clicked :: run()


class InfoProcessProtocol(ProcessProtocol):
    """
    esptool.py --port /dev/ttyUSB0 flash_id
    esptool.py v2.1
    Connecting....
    Detecting chip type... ESP8266
    Chip is ESP8266
    Uploading stub...
    Running stub...
    Stub running...
    Manufacturer: c8
    Device: 4016
    Detected flash size: 4MB
    Hard resetting...
    
    esptool.py --port /dev/ttyUSB0 chip_id
    esptool.py v2.1
    Connecting....
    Detecting chip type... ESP8266
    Chip is ESP8266
    Uploading stub...
    Running stub...
    Stub running...
    Chip ID: 0x0066f213
    Hard resetting...

    
    
    """

    def __init__(self, view):
        self.view = view
        self.done = Deferred()

    def outReceived(self, data):
        source = []
        for line in data.decode().split("\n"):
            source.append(line)
        self.view.source += "<br/>".join(source)

    def processExited(self, reason):
        v = self.view
        v.complete = True
        v.status = "Success" if reason.value.exitCode == 0 else "Failed"
        self.done.callback(reason.value.exitCode)


enamldef BoardInfoDialog(Dialog): dialog:
    title = 'Board Info'
    attr command
    attr event
    attr source = ""
    attr complete = False
    attr plugin
    attr status = ""
    initial_size = (640, 320)
    func run():
        details.visible = True
        console.source = ""
        proto = InfoProcessProtocol(dialog)
        plugin.get_flash_info(proto)

        # #: After the first is done run the second
        # proto.done.addCallback(
        #     lambda r,p=plugin,proto=proto:p.get_chip_info(proto))

    TaskDialogStyleSheet:
            pass
    TaskDialogBody:
        TaskDialogInstructionArea:
            Label:
                style_class = 'task-dialog-instructions'
                text = 'Board info'
        TaskDialogContentArea:
            Label:
                style_class = 'task-dialog-content'
                text = 'Read flash_id and chip_id from the board.'
            Form:
                ObjectCombo: ports:
                    items = comports()
                    selected ::
                        editor = event.workbench.get_plugin('micropyde.editor')
                        editor.port = change['value'].device
                PushButton: btn:
                    text = "Refresh"
                    clicked :: ports.items = comports()
        TaskDialogDetailsArea: details:
            visible = False
            Html: console:
                source << dialog.source
        TaskDialogCommandArea:
            constraints = [
                hbox(spacer, btn_yes, btn_no),
                align('v_center', btn_yes, btn_no)
            ]
            PushButton: btn_no:
                text << "Close" if dialog.complete else "Cancel"
                clicked :: dialog.close()
            PushButton: btn_yes:
                text = "Get"
                clicked :: run()


enamldef PasswordDialog(Dialog): dialog:
    title = 'Board Login'
    attr command
    attr event
    attr plugin #: A BoardPlugin
    attr callback = lambda pwd: None
    initial_size = (640, 320)
    TaskDialogStyleSheet:
            pass
    TaskDialogBody:
        TaskDialogInstructionArea:
            Label:
                style_class = 'task-dialog-instructions'
                text = 'Board login'
        TaskDialogContentArea:
            Label:
                style_class = 'task-dialog-content'
                text = 'Enter password to login'
            Form:
                Label:
                    text = "Password"
                Field: pwd:
                    submit_triggers = ['auto_sync']
                    echo_mode << 'normal' if show.checked else 'password'
                Label:
                    pass
                CheckBox: show:
                    text = "Show password"
            Label:
                text = "Warning: Saved passwords are stored in plain text!"

        TaskDialogCommandArea:
            constraints = [
                hbox(save, spacer, btn_yes, btn_no),
                align('v_center', save, btn_yes, btn_no)
            ]
            CheckBox: save:
                text = "Save password"
            PushButton: btn_no:
                text << "Cancel"
                clicked ::
                    dialog.callback(None)
                    dialog.close()
            PushButton: btn_yes:
                text = "Login"
                enabled << len(pwd.text)>=4
                clicked ::
                    if save.checked:
                        plugin.save_password(pwd.text)
                    plugin.board.write((pwd.text+"\r\n").encode())
                    dialog.callback(pwd.text)
                    dialog.close()



enamldef ProgressDialog(Dialog): dialog:
    attr command
    attr event
    attr plugin #: A BoardPlugin
    attr view #: A TerminalDockItem
    initial_size = (640, 320)
    title = 'Progress'
    attr caption = "Task is in progress..."
    TaskDialogStyleSheet:
            pass
    TaskDialogBody:
        TaskDialogInstructionArea:
            Label:
                style_class = 'task-dialog-instructions'
                text << dialog.title
        TaskDialogContentArea:
            Label:
                style_class = 'task-dialog-content'
                text << dialog.caption
            Form:
                Label:
                    text = "Password"
                Field: pwd:
                    submit_triggers = ['auto_sync']
                    echo_mode << 'normal' if show.checked else 'password'
                Label:
                    pass
                CheckBox: show:
                    text = "Show password"
            Label:
                text = "Warning: Saved passwords are stored in plain text!"

        TaskDialogCommandArea:
            constraints = [
                hbox(save, spacer, btn_yes, btn_no),
                align('v_center', save, btn_yes, btn_no)
            ]
            CheckBox: save:
                text = "Save password"
            PushButton: btn_no:
                text << "Cancel"
                clicked :: dialog.close()
            PushButton: btn_yes:
                text = "Login"
                enabled << len(pwd.text)>=4
                clicked :: run()
