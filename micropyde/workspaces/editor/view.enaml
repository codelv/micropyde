#------------------------------------------------------------------------------
# Copyright (c) 2017 Jairus Martin
#
# Distributed under the terms of the GPL v3 License.
#
# The full license is in the file LICENSE, distributed with this software.
#------------------------------------------------------------------------------
import os
import textwrap
from glob import glob
from collections import OrderedDict
from serial.tools.list_ports import comports
from enaml.core.api import Conditional, Looper
from enaml.layout.api import (
    HSplitLayout, AreaLayout, DockBarLayout, VSplitLayout, TabLayout,
    hbox, vbox, align
)
from enaml.widgets.api import (
    FileDialogEx, Container, Html, IPythonConsole, PushButton,
    ObjectCombo, Timer, ProgressBar, Label,
)
from enaml.workbench.api import Extension, PluginManifest
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup

from micropyde.utils import load_icon

from .utils import PickableDockArea as DockArea
from .utils import PickableDockItem as DockItem
from .views.api import (
    TerminalView, ModuleView, FileBrowserView, CodeInspectionView,
    FlashDialog, EraseDialog, BoardInfoDialog, EditorView
)

enamldef EditorView(DockArea): view:
    name = 'editor'
    alias terminal
    attr workbench
    attr plugin = workbench.get_plugin('micropyde.editor')
    layout = AreaLayout(
        TabLayout(*['editor-item-{}'.format(doc.name)
                        for doc in plugin.documents]),
        dock_bars=[
            DockBarLayout(
                # 'model-editor-item',
                'modules-item',
                'files-item',
                'inspection-item',
                position='left',
            ),
            DockBarLayout(
                'console-item',
                'ipython-item',
                position='bottom',
            ),
        ],
    )
    Looper:
        iterable << plugin.documents
        DockItem:
            name = 'editor-item-{}'.format(loop_item.name)
            title << loop_item.name
            stretch = 4
            icon = load_icon("script_code")
            EditorView:
                plugin << view.plugin
                model << loop_item
    DockItem: module_index:
        name = 'modules-item'
        title = 'Modules'
        icon = load_icon("package")
        stretch = 1
        ModuleView:
            plugin << view.plugin

    DockItem: file_browser:
        name = 'files-item'
        title = 'Files'
        icon = load_icon("folder")
        stretch = 1
        FileBrowserView:
            plugin << view.plugin
    DockItem:
        name = 'inspection-item'
        title = 'Errors'
        icon = load_icon("flag_red")
        stretch = 1
        CodeInspectionView: errors:
            plugin << view.plugin
    DockItem:
        name = 'console-item'
        title = 'Terminal'
        icon = load_icon("application_xp_terminal")
        stretch = 1
        TerminalView: terminal:
            plugin << view.plugin
    DockItem:
        name = 'ipython-item'
        title = 'IPython'
        icon = load_icon("application_osx")
        Container:
            padding = 0
            IPythonConsole: ipython:
                pass

def create_new_area():
    """ Create a new pickable dock area with two child panes.

    """
    area = EditorView()
    # area.editor.set_text(textwrap.dedent("""
    # print("Hello world!")
    #
    # """))
    return area


def plugin_command(name, event):
    editor = event.workbench.get_plugin('micropyde.editor')
    handler = getattr(editor, name)
    handler(event)

def erase_flash(event):
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    editor = event.workbench.get_plugin('micropyde.editor')
    EraseDialog(ui.window, event=event, plugin=editor).exec_()

def update_firmware(event):
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    plugin = event.workbench.get_plugin('micropyde.editor')
    path = FileDialogEx.get_open_file_name(
        ui.window,
        current_path=plugin.last_path,
        name_filters=['*.bin','*.ota'])

    if path:
        plugin.flash_filename = path
        plugin.last_path = os.path.dirname(path)
        FlashDialog(ui.window, event=event, plugin=plugin).exec_()
        #plugin_command('update_firmware', event)

def get_info(event):
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    editor = event.workbench.get_plugin('micropyde.editor')
    BoardInfoDialog(ui.window, event=event, plugin=editor).exec_()

def open_file(event):
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    plugin = event.workbench.get_plugin('micropyde.editor')
    path = event.parameters.get('path', '')
    if not path:
        path = FileDialogEx.get_open_file_name(
            ui.window,
            current_path=plugin.last_path,
            name_filters=['*.py','*.c','*.cpp', '*.*'])
        plugin.last_path = os.path.dirname(path)
    if path:
        event.parameters['path'] = path
        plugin.open_file(event)

def new_file(event):
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    plugin = event.workbench.get_plugin('micropyde.editor')
    raise NotImplementedError


def editor_plugin():
    from .plugin import EditorPlugin
    return EditorPlugin()


def get_examples():
    """ Get all examples matching examples/*/*.py """
    examples = OrderedDict([])
    py_files = [f.replace("\\","/").split("/")[1:] for f in glob('examples/**/*.py', recursive=True)]
    for path in sorted(py_files):
        folders = path[:-1]
        folder = None
        #: Need to add all folders one at a time to make sure
        #: menu items for each are created exactly once
        #: Ex. examples/pyb/01-Bla will create the keys in order
        #: ['examples','examples/pyb','examples/pyb/01-Bla']
        for i in range(len(folders)):
            subfolder = folders[i]
            if folder:
                folder = "{}/{}".format(folder,subfolder)
            else:
                folder = subfolder
            if folder not in examples:
                examples[folder] = []
        examples[folder].append("/".join(path))
    return examples


enamldef EditorManifest(PluginManifest):
    """ The manifest which is registered when the view is loaded.

    This manifest contributes extra menu items to the menu bar and
    new commands for manipulating the dock area items.

    """
    id = 'micropyde.editor'
    factory = editor_plugin
    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'micropyde.board.erase_flash'
            handler = erase_flash
        Command:
            id = 'micropyde.board.upload_file'
            handler = lambda event:plugin_command('upload_file', event)
        Command:
            id = 'micropyde.board.run_script'
            handler = lambda event:plugin_command('run_script', event)
        Command:
            id = 'micropyde.board.update_firmware'
            handler = update_firmware
        Command:
           id = 'micropyde.board.get_info'
           handler = get_info
        Command:
            id = 'micropyde.board.build_index'
            handler = lambda event:plugin_command('build_index', event)
        Command:
            id = 'micropyde.board.scan_files'
            handler = lambda event:plugin_command('scan_files', event)
        Command:
            id = 'micropyde.editor.new_file'
            handler = new_file
        Command:
            id = 'micropyde.editor.open_file'
            handler = open_file
    Extension:
        id = 'actions'
        point = 'enaml.workbench.ui.actions'
        ActionItem:
            path = '/file/new'
            label = 'New'
            shortcut = 'Ctrl+N'
            group = 'user'
            command = 'micropyde.editor.new_file'
        ActionItem:
            path = '/file/open'
            label = 'Open'
            shortcut = 'Ctrl+O'
            group = 'user'
            command = 'micropyde.editor.open_file'
        MenuItem:
            path = '/examples'
            label = 'Examples'
            after = 'file'
            ItemGroup:
                id = 'examples'

        Looper:
            iterable = get_examples().items()
            MenuItem:
                path = '/examples/{}'.format(loop_item[0].replace(" ",'-'))
                label = loop_item[0].split("/")[-1]
                group = 'examples' if len(loop_item[0].split("/")) == 0 else ""
            Looper:
                iterable = loop_item[1]
                ActionItem:
                    attr filename = loop_item.split("/")[-1]
                    path = '/examples/{}'.format(loop_item.replace(" ",'-'))
                    label = filename
                    command = 'micropyde.editor.open_file'
                    parameters = {'path': 'examples/{}'.format(loop_item), 'name': 'main.py'}
            # MenuItem:
            #     path = '/tools'
            #     label = 'Tools'
            #     before = 'workspace'
        MenuItem:
            path = '/board'
            label = 'Board'
            after = 'file'
        ActionItem:
            path = '/board/run'
            label = 'Run'
            shortcut = 'Ctrl+R'
            command = 'micropyde.board.run_script'
        ActionItem:
            path = '/board/upload'
            label = 'Upload'
            shortcut = 'Ctrl+U'
            command = 'micropyde.board.upload_file'
        ActionItem:
            path = '/board/info'
            label = 'Board info'
            command = 'micropyde.board.get_info'
        ActionItem:
            path = '/board/firmware'
            label = 'Flash firmware...'
            command = 'micropyde.board.update_firmware'
        ActionItem:
            path = '/board/erase'
            label = 'Erase flash...'
            command = 'micropyde.board.erase_flash'

