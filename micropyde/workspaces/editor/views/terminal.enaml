#------------------------------------------------------------------------------
# Copyright (c) 2017 Jairus Martin
#
# Distributed under the terms of the GPL v3 License.
#
# The full license is in the file LICENSE, distributed with this software.
#------------------------------------------------------------------------------
from serial.tools.list_ports import comports
from twisted.internet.protocol import Protocol
from enaml.layout.api import hbox, vbox, align
from enaml.widgets.api import (
    Container, ObjectCombo, PushButton, Html, Field, Timer, Splitter, SplitItem
)
from enaml.scintilla.api import Scintilla
from .themes import THEMES
from micropyde.utils import load_icon
from enamlx.widgets.api import KeyEvent

class TerminalProtocol(Protocol):
    def __init__(self, view):
        self.view = view
        self.listeners = []
        super(TerminalProtocol, self).__init__()

    def connectionMade(self):
        self.view.opened = True
        #self.transport._serial.flush()
        #self.transport.write(b'\x02') # Make sure were not in raw mode

    def connectionLost(self, reason):
        self.view.opened = False

    def dataReceived(self, data):
        console = self.view.console
        widget = console.proxy.widget
        #: Append text

        try:
            data = data.decode('utf-8','replace')
            widget.append(data)
            #: Scroll to end
            widget.ensureLineVisible(widget.lines())

            #: Notify any listeners
            for listener in self.listeners:
                listener(data)
        except Exception as e:
            print("Failed to read output: {}".format(e))


enamldef TerminalView(Container): view:
    attr ports = comports()
    attr protocol: TerminalProtocol
    alias console
    attr plugin
    attr opened = False
    func toggle_port():
        was_open = opened
        plugin.close_port()
        if not was_open:
            view.protocol = TerminalProtocol(view)
            if plugin.open_port(view.protocol):
                plugin.com_port.write(b"help()\r\n")
    func write_text(text):
        if not text.endswith("\r\n"):
            text += "\r\n"
        if not text.startswith("\r\n"):
            text = "\r\n" + text
        #: Enter paste mode
        plugin.com_port.write(b'\x05')
        #: Send text
        plugin.com_port.write(text.encode())
        plugin.com_port.write(b'\x04')
        to_send.set_text("")

    constraints = [
        vbox(
            hbox(ports_cmb,btn_open, btn_refresh, btn_clear),
            splitter,
        ),
        align('v_center', ports_cmb,btn_open, btn_refresh, btn_clear),
        #to_send.height >= 30,
        #to_send.height <= 50,
    ]
    ObjectCombo: ports_cmb:
        items << ports
        selected ::
            port = change['value']
            if port:
                plugin.port = change['value'].device

    PushButton: btn_open:
        #text << "Close" if opened else "Open"
        icon << load_icon("connect" if opened else "disconnect")
        tool_tip << "Connected. Click to disconnect" if opened else "Disconnected. Click to Connect"
        clicked :: toggle_port()
    PushButton: btn_clear:
        #text = "Clear"
        icon = load_icon("bin")
        tool_tip = "Clear console"
        clicked :: console.set_text("")
    PushButton: btn_refresh:
        icon = load_icon("arrow_refresh")
        tool_tip = "Refresh ports"
        clicked :: view.ports = comports()
    Splitter: splitter:
        orientation = 'vertical'
        SplitItem:
            Container:
                padding = 0
                resist_height = 'weak'
                Scintilla: console:
                    syntax = "python"
                    theme << THEMES[plugin.theme]
                    #text_changed ::
                    #    self.proxy.widget.
                    activated ::
                        #set_text(getattr(console, 'buffer'))
                        self.proxy.widget.setReadOnly(True)

                    theme << THEMES[plugin.theme]
                    settings = {
                        "tab_width": 4,
                        "use_tabs": False,
                        "indent": 4,
                        "tab_indents": True,
                        "backspace_unindents": True,
                    }
                    # Timer: timer:
                #     interval = 350
                #     single_shot = True
                #     timeout :: setattr(console, "buffer", str(editor.get_text()))
        SplitItem:
            Container:
                padding = 0
                resist_height = 'weak'
                constraints = [
                    hbox(to_send, bbox),
                    align('v_center', to_send, bbox),
                    # to_send.height >= 30,
                    #to_send.height <= 100,
                ]
                Scintilla: to_send:
                    syntax = "python"
                    theme << THEMES[plugin.theme]
                    enabled << opened
                    settings = {
                        "tab_width": 4,
                        "use_tabs": False,
                        "indent": 4,
                        "tab_indents": True,
                        "backspace_unindents": True,
                        "autocompletion_threshold": 1,
                    }
                    autocomplete = 'all'
                    text_changed :: timer.start()
                    Timer: timer:
                        interval = 50
                        single_shot = True
                        timeout ::
                            text = to_send.get_text()
                            to_send.autocompletions = plugin.autocomplete(text)
                            #: Force trigger
                            if text.endswith("."):
                                to_send.proxy.widget.autoCompleteFromAll()
                    KeyEvent:
                        keys = ['shift+return']
                        released ::
                            text = to_send.get_text()
                            write_text(text)
                            to_send.set_text("")

                Container: bbox:
                    PushButton: btn_send:
                        text << "Send"
                        tool_tip = "Paste contents into interpreter"
                        enabled << opened
                        clicked ::
                            text = to_send.get_text()
                            write_text(text)
                            to_send.set_text("")
                    PushButton: btn_abort:
                        text << "Abort"
                        enabled << opened
                        tool_tip = "Send Ctrl+C"
                        clicked :: plugin.com_port.write(b'\x03')
                    PushButton: btn_raw:
                        text << "Raw"
                        enabled << opened
                        tool_tip = "Send Ctrl+B"
                        clicked :: plugin.com_port.write(b'\x02')
                    PushButton: btn_rst:
                        text << "Reset"
                        enabled << opened
                        tool_tip = "Send Ctrl+D"
                        clicked :: plugin.com_port.write(b'\x04')



