#------------------------------------------------------------------------------
# Copyright (c) 2017 Jairus Martin
#
# Distributed under the terms of the GPL v3 License.
#
# The full license is in the file LICENSE, distributed with this software.
#------------------------------------------------------------------------------
from enaml.core.api import Conditional, Looper
from enaml.widgets.api import Container, PushButton, ProgressBar, Label, Field
from enamlx.widgets.api import TreeView, TreeViewItem, TreeViewColumn
from micropyde.utils import load_icon


enamldef ModuleView(Container): view:
    attr plugin
    attr modules << sorted(plugin.modules.items(),
                           key=lambda m: m[0])
    Field: search:
        placeholder = "Search..."
        submit_triggers = ['auto_sync']
        #text :: print(change)
    TreeView: tree:
        horizontal_headers = ['Module', 'Attr', 'Type', 'Value']
        horizontal_stretch = True
        items << [m for m in modules if not search.text or search.text in m[0]]
        Looper:
            iterable << tree.items
            TreeViewItem:
                attr mod << tree.items[loop_index] if loop_index <len(tree.items) else ("",{})
                text << '{}'.format(mod[0])
                items << list(mod[1].items())
                Looper:
                    iterable << parent.items
                    TreeViewItem:
                        attr spec = loop_item[1]
                        TreeViewColumn:
                            text << '{}'.format(spec.get('name', ''))
                        TreeViewColumn:
                            text << '{}'.format(spec.get('type', ''))
                        TreeViewColumn:
                            text << '{}'.format(spec.get('value', ''))
    Conditional: indexing:
        condition << (plugin.indexing_progress> 0
                      and plugin.indexing_progress < 100)
        ProgressBar:
            value << plugin.indexing_progress
        Label:
            text << plugin.indexing_status
    PushButton:
        icon = load_icon("arrow_refresh")
        text = "refresh"
        clicked ::
            core = plugin.workbench.get_plugin('enaml.workbench.core')
            core.invoke_command('micropyde.board.build_index')